//Deep Get Functionality

// ---------------------------------------------------------
// get
// Search for any value contained within nested maps, by using
// dot notation as the key argument
//
// Required arguments:
// `$key` String
//
// Example of use:
// get('border.radius.xs')
//
// Dependencies:
// deep-map-check, deep-map-get, str-explode
//
// @return Anything
// ---------------------------------------------------------
@function get ($key, $map: $tokenTest) {
    $keys: str-explode($key, '.');
  
    @if not deep-map-check($map, $keys...) {
      @error 'The argument $map: `#{$map}` doesn\'t has some of the $keys: `#{$keys}`!';
    }
  
    @return deep-map-get($map, $keys...);
  }
  
  
  // ---------------------------------------------------------
  // str-explode
  // Split a string by delimiter
  //
  // Required arguments:
  // `$string` String
  // `$delimiter` String *predefined*
  //
  // Example of use:
  // str-explode('some-things-will-never-change', '-')
  //
  // @return List
  // ---------------------------------------------------------
  @function str-explode ($string, $delimiter: '') {
    @if type-of($string) != 'string' {
      @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
    }
    @else if type-of($delimiter) != 'string' {
      @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
    }
  
    $result: ();
    $running: true;
  
    @if str-length($delimiter) == 0 {
      @for $i from 1 through str-length($string) {
        $result: append($result, str-slice($string, $i, $i));
      }
  
      @return $result;
    }
  
    @while $running {
      $index: str-index($string, $delimiter);
  
      @if $index != null {
        $item: str-slice($string, 1, ($index - 1));
        $result: append($result, $item);
        $string: str-slice($string, ($index + str-length($delimiter)));
      }
      @else {
        $running: false;
      }
    }
  
    @return append($result, $string);
  }
  
  // ---------------------------------------------------------
  // deep-map-check
  // Check if nested map has a value by the keys
  //
  // Required arguments:
  // `$map` Map
  // `$keys` String(s)
  //
  // Example of use:
  // deep-map-check($nested-map, 'key-1', 'key-2')
  //
  // @return Bool
  // ---------------------------------------------------------
  @function deep-map-check ($map, $keys...) {
    @if type-of($map) != 'map' {
      @error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required!';
    }
  
    @each $key in $keys {
      @if not map-has-key($map, $key) {
        @return false;
      }
  
      $map: map-get($map, $key);
    }
  
    @return true;
  }
  



  $private-sassy-maps-suppress-warnings: false !default;


//////////////////////////////
// Map Get Deep
//
// Given a map and a list of keys, find the value at the given key
//////////////////////////////
@function map-get-deep($map, $keys...) {
  @if length($keys) == 1 {
    $keys: nth($keys, 1);
  }
  $warn: "#{nth($keys, 1)}";
  $length: length($keys);
  $get: map-get($map, nth($keys, 1));

  @if $length > 1 {
    @for $i from 2 through $length {
      @if $get != null and type-of($get) == 'map' {
        $warn: $warn + "->#{nth($keys, $i)}";
        $get: map-get($get, nth($keys, $i));

        @if $get == null {
          @return map-get-deep-warning($warn, $get, nth($keys, $i));
        }
      }
      @else {
        @return map-get-deep-warning($warn, $get, nth($keys, $i));
      }
    }
  }

  @return $get;
}

//////////////////////////////
// Map Get Deep Warning
//
// Displays a warning if the retrieved value is `null`
//////////////////////////////
@function map-get-deep-warning($warn, $get, $key) {
  @if not $private-sassy-maps-suppress-warnings {
    @if $get == null {
      @warn "Map has no value for key search `#{$warn}`";
    }
    @else if type-of($get) != 'map' {
      @warn "Non-map value found for key search `#{$warn}`, cannot search for key `#{$key}`";
    }
  }
  @return null;
}


//TODO there might be away to do this more efficiently by iterating through the map to get the deepiest item
//This will go through a nested map and grab the deepiest property
//STILL NEEDS TESTING
@function get-deepest-token($token, $component, $attribute-type, $attribute, $component-variant:"", $component-state:""){
  @if type-of($token) != 'map' {
    @error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required!';
  }

  @if deep-map-check($token, $component, $attribute-type, $component-variant, $component-state, $attribute){
    @return map-get-deep($token, $component, $attribute-type, $component-variant, $component-state, $attribute);
  }

  @if deep-map-check($token, $component, $attribute-type, $component-variant, $attribute){
    @return map-get-deep($token, $component, $attribute-type, $component-variant, $attribute);
  }

  @if deep-map-check($token, $component, $attribute-type, $attribute){
    @return map-get-deep($token, $component, $attribute-type, $attribute);
  }
};